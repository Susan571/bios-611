plot2 <- function() {ggplot(data, aes(x = Cardio)) +
geom_bar(position = "stack", stat = "count") +
labs(title = "Distribution of Cardiovascular Disease",
x = "Cardiovascular Disease",
y = "Count") +
theme_minimal()
}
plot1()
plot1()
plot2()
library(readr)
library(matlab)
library(tidyverse)
library(ggplot2)
ufo_data <- read_csv("/Users/susanefforta/Downloads/ufo_data.csv")
embedding<-read_csv("/Users/susanefforta/Downloads/embeddings_output_clean.csv",col_names = F) %>%
select(-last_col())
pca_result <- prcomp(embedding)
variance <- (pca_result$sdev)^2
cumulative_variance <- cumsum(variance)/sum(variance)
df <- data.frame(Dimension=1:length(cumulative_variance), Cumulativevariance=cumulative_variance)
ggplot(df, aes(x=Dimension, y=Cumulativevariance)) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0.85) +
xlab("Principal Component") +
ylab("Cumulative Proportion of Variance Explained") +
ggtitle("PCA Cumulative Variance Plot")
imagesc(pca_result$x[,1:500])
pcs<-pca_result$x[,1:100] %>% as_tibble(name_repair="simple")
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot")
library(readr)
library(matlab)
library(tidyverse)
library(ggplot2)
ufo_data <- read_csv("/Users/susanefforta/Downloads/ufo_data.csv")
embedding<-read_csv("/Users/susanefforta/Downloads/embeddings_output_clean.csv",col_names = F) %>%
select(-last_col()) %>% as.matrix()
imagesc(embedding)
pca_result <- prcomp(embedding)
variance <- (pca_result$sdev)^2
cumulative_variance <- cumsum(variance)/sum(variance)
df <- data.frame(Dimension=1:length(cumulative_variance), Cumulativevariance=cumulative_variance)
#Q1
ggplot(df, aes(x=Dimension, y=Cumulativevariance)) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0.85) +
xlab("Principal Component") +
ylab("Cumulative Proportion of Variance Explained") +
ggtitle("PCA Cumulative Variance Plot")
ggsave("explained_varaince.png")
imagesc(pca_result$x[,1:500])
pcs<-pca_result$x[,1:100] %>% as_tibble(name_repair="simple")
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot")
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=ufo_data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot")
ggsave("Scatter_Plot.png")
head(ufo_data)
head(embedding)
head(pcs)
#Q3
# Load necessary library
library(dplyr)
upper_pc1 <- 95      # replace with your condition value
low_pc1 <- 80
upper_pc2 <- 70
low_pc2 <-50
# Filter pca_results based on your conditions
filtered_pca <- pcs %>%
filter( upper_pc1>PC1 >low_pc1, low_pc2<PC2 < upper_pc2)
# Filter pca_results based on your conditions
filtered_pca <- pcs %>%
filter( upper_pc1>PC1, PC1>low_pc1, low_pc2<PC2, PC2< upper_pc2)
# Get the row indices of the filtered results
filtered_indices <- as.numeric(rownames(filtered_pca))
# Use these indices to get the corresponding rows from the UFO dataset
corresponding_ufo_data <- ufo_data[filtered_indices, ]
corresponding_ufo_data$Summary
#Region 2
upper_pc1_2 <- -51      # replace with your condition value
low_pc1_2 <- -70
upper_pc2_2 <- 15
low_pc2_2 <-0
# Filter pca_results based on your conditions
filtered_pca_2 <- pcs %>%
filter( upper_pc1_2>PC1, PC1>low_pc1_2, low_pc2_2<PC2, PC2< upper_pc2_2)
# Get the row indices of the filtered results
filtered_indices_2 <- as.numeric(rownames(filtered_pca_2))
# Use these indices to get the corresponding rows from the UFO dataset
corresponding_ufo_data_2 <- ufo_data[filtered_indices_2, ]
corresponding_ufo_data_2$Summary
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=ufo_data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot") +
geom_circle(aes(x0 = -60, y0 = 8, r = 1), colour="red", lwd=2)
install.packages("ggforce")
library(ggforce)
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=ufo_data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot") +
geom_circle(aes(x0 = -60, y0 = 8, r = 1), colour="red", lwd=2)
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=ufo_data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot") +
geom_circle(aes(x0 = -60, y0 = 8, r = 1), colour="red")
ggsave("Scatter_Plot.png")
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=ufo_data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot") +
geom_circle(aes(x0 = -55, y0 = 5, r = 5), colour="red")
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=ufo_data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot") +
geom_circle(aes(x0 = -55, y0 = 5, r = 3), colour="red")
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=ufo_data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot") +
geom_circle(aes(x0 = -58, y0 = 5, r = 3), colour="red")
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=ufo_data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot") +
geom_circle(aes(x0 = -57, y0 = 5, r = 3), colour="red")
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=ufo_data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot") +
geom_circle(aes(x0 = -57, y0 = 5, r = 3), colour="red") +
geom_circle(aes(x0 = 75, y0 = 55, r = 5), colour="red")
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=ufo_data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot") +
geom_circle(aes(x0 = -57, y0 = 5, r = 3), colour="red") +
geom_circle(aes(x0 = 85, y0 = 58, r = 5), colour="red")
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=ufo_data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot") +
geom_circle(aes(x0 = -57, y0 = 5, r = 3), colour="red") +
geom_circle(aes(x0 = 90, y0 = 58, r = 8), colour="red")
ggplot(pcs, aes(PC1, PC2)) +
geom_point(aes(color=ufo_data$Shape)) +
xlab("PC 1") +
ylab("PC2") +
ggtitle("PCA Scatter Plot") +
geom_circle(aes(x0 = -57, y0 = 5, r = 3), colour="red") +
geom_circle(aes(x0 = 90, y0 = 58, r = 10), colour="red")
state_histogram <- corresponding_ufo_data %>%
group_by(State) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Plot the histogram
ggplot(state_histogram, aes(x = State, y = count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "State", y = "Count of Sightings", title = "Count of Sightings Per State")
head(embedding)
corresponding_ufo_data$Summary
write.table(corresponding_ufo_data$Summary, file = "Summary.txt", row.names = FALSE)
write.table(corresponding_ufo_data_2$Summary, file = "Summary2.txt", row.names = FALSE)
4267.3- 4238.1
1-pchisq(29.2,4)
1-pchisq(4,29.2)
pchisq?
()
pchisq()?
?
()
3239.0-3218.4
1-pchisq(20.6)
1-pchisq(20.6, 3)
3389.7-3369.3
1-pchisq(20.4, 3)
pchisq(122.398,4)
1-pchisq(1.97,4)
pchisq(1.97,4)
1-pf(1.97,4, 98)
102-9
1-pf(1.97,4, 93)
102-4
1-pf(1.97,4, 90)
1-pf(1.97,4, 72)
1-pf(1.97,4, 86)
1-pf(1.97,4, 82)
103-82
1-pf(0.61,2, 82)
9.0227+4.144
9.0227-7.395
9.0227-5.23
sqrt((5.651^2+5.934^2)/4)
sqrt((5.651^2+5.934^2))
sqrt((5.651^2+5.934^2)/2)
sqrt((6.191^2+5.974^2))
sqrt((6.191^2+5.974^2)/1.5)
sqrt((6.191^2+5.974^2)/2)
sqrt((5.651^2+5.934^2)/1.7)
sqrt((5.651^2+6.025^2)/1.7)
sqrt((5.651^2+8.833^2)/1.7)
70*24-730
400+24
167+133+147
$146.15
146.15+126.78+167
439.93+99
51.8285/9.4732
42.3605/9.4732
45.9413/9.4732
35.1273/9.4732
31.3517/9.4732
setwd("~/work")
setwd("~/BIOS611project")
source("~/BIOS611project/data_clean.R")
source("~/BIOS611project/data_clean.R")
data <- read.csv("data/cardio_train.csv")
setwd("~/BIOS611project")
data <- read.csv("data/cardio_train.csv")
#take a look at the data set in general
colnames(data)
head(data)
cat(sprintf("The dataset contains the following %d variables: %s. \n",
ncol(data), paste(colnames(data), collapse = ", ")),
file="data_explore.txt", append = FALSE);
#take a closer look at each of the variables
summary(data$id)
#First look at the discrete (categorical) variables
cat(sprintf("Let us first take a look at the discrete (categorical) covariates. "),
file="data_explore.txt", append = TRUE);
table(data$gender)
data$gender
View(data)
View(data)
data <- read.csv("data/cardio_train.csv",header = TRUE,sep=",")
#take a look at the data set in general
colnames(data)
head(data)
data <- read.csv("data/cardio_train.csv",header = TRUE,sep=".")
#take a look at the data set in general
colnames(data)
head(data)
View(data)
View(data)
library(readxl)
library(tidyverse)
library(dplyr)
setwd("~/BIOS611project")
data <- read.csv("data/cardio_train.csv")
View(data)
View(data)
View(data)
data <- read.csv("data/cardio_train.csv",header = TRUE, sep = ",")
#take a look at the data set in general
colnames(data)
head(data)
View(data)
data <- read.csv("data/cardio_train.csv",header = TRUE, sep = ";")
View(data)
#take a look at the data set in general
colnames(data)
head(data)
cat(sprintf("The dataset contains the following %d variables: %s. \n",
ncol(data), paste(colnames(data), collapse = ", ")),
file="data_explore.txt", append = FALSE);
#take a closer look at each of the variables
summary(data$id)
#First look at the discrete (categorical) variables
cat(sprintf("Let us first take a look at the discrete (categorical) covariates. "),
file="data_explore.txt", append = TRUE);
table(data$gender)
data<-subset(data, gender!="Other") # only one non-binary gender, not large enough sample size.
cat(sprintf("There are %d females, %d males in the dataset. ",
table(data$gender)[1],table(data$gender)[2]),
file="data_explore.txt", append = TRUE);
table(data$hypertension)
cat(sprintf("There are %d without hypertension, %d with hypertension in the dataset. ",
table(data$hypertension)[1],table(data$hypertension)[2]),
file="data_explore.txt", append = TRUE);
table(data$heart_disease)
table(data$smoke)
cat(sprintf("For the smoking status, %d smokes, %d never smoked in the dataset. ",
table(data$smoking_status)[2],table(data$smoking_status)[1]),
file="data_explore.txt", append = TRUE);
summary(data$age)
summary(data$height)
summary(data$weight)
summary(data$ap_hi)
summary(data$ap_lo)
source("~/BIOS611project/data_clean.R")
write_csv(data, "/data/clean_data.csv")
write_csv(data, "data/clean_data.csv")
library(ggplot2)
library(ggpubr)
library(MASS)
library(PerformanceAnalytics)
setwd("~/BIOS611project")
data <- read.csv("data/clean_data.csv")
#visualizing the categorical and continuous variables
png('./figures/variable_distributions.png')
#categorical
gender_distribution <- data %>%
ggplot(aes(x = gender, fill = as.factor(stroke))) +geom_bar()
gender_distribution
#categorical
gender_distribution <- data %>%
ggplot(aes(x = gender, fill = as.factor(cardio))) +geom_bar()
gender_distribution
source("~/BIOS611project/data_visualization.R")
library(ggplot2)
library(ggpubr)
library(MASS)
library(PerformanceAnalytics)
setwd("~/BIOS611project")
data <- read.csv("data/clean_data.csv")
#visualizing the categorical and continuous variables
png('./figures/variable_distributions.png')
#categorical
gender_distribution <- data %>%
ggplot(aes(x = gender, fill = as.factor(cardio))) +geom_bar()
smoke_distribution <- data %>%
ggplot(aes(x = smoke, fill = as.factor(cardio))) +geom_bar()
alco_distribution <- data %>%
ggplot(aes(x = alco, fill = as.factor(cardio))) +geom_bar()
active_distribution <- data %>%
ggplot(aes(x = active, fill = as.factor(cardio))) +geom_bar()
cholesterol_distribution <- data %>%
ggplot(aes(x = cholesterol, fill = as.factor(cardio))) +geom_bar()
gluc_distribution <- data %>%
ggplot(aes(x = gluc, fill = as.factor(cardio))) +geom_bar()
#continuous
age_distribution <- data %>%
ggplot(aes(x = age, fill = as.factor(cardio))) + geom_histogram(bins=30) +
theme(legend.position="none")
height_distribution <- data %>%
ggplot(aes(x = height, fill = as.factor(cardio))) + geom_histogram(bins=30) +
theme(legend.position="none")
weight_distribution <- data %>%
ggplot(aes(x = weight, fill = as.factor(cardio))) + geom_histogram(bins=30) +
theme(legend.position="none")
hi_distribution <- data %>%
ggplot(aes(x = ap_hi, fill = as.factor(cardio))) + geom_histogram(bins=30) +
theme(legend.position="none")
lo_distribution <- data %>%
ggplot(aes(x = ap_lo, fill = as.factor(cardio))) + geom_histogram(bins=30) +
theme(legend.position="none")
#put into the same frame
figure <- ggarrange(gender_distribution, smoke_distribution, alco_distribution,
active_distribution, cholesterol_distribution, gluc_distribution,
age_distribution, height_distribution, weight_distribution,
hi_distribution, lo_distribution,
ncol = 3, nrow = 4)
figure
dev.off()
figure
#visualizing the categorical and continuous variables
png('./figures/variable_distributions.png')
#categorical
gender_distribution <- data %>%
ggplot(aes(x = gender, fill = as.factor(cardio))) +geom_bar()
smoke_distribution <- data %>%
ggplot(aes(x = smoke, fill = as.factor(cardio))) +geom_bar()
alco_distribution <- data %>%
ggplot(aes(x = alco, fill = as.factor(cardio))) +geom_bar()
active_distribution <- data %>%
ggplot(aes(x = active, fill = as.factor(cardio))) +geom_bar()
cholesterol_distribution <- data %>%
ggplot(aes(x = cholesterol, fill = as.factor(cardio))) +geom_bar()
gluc_distribution <- data %>%
ggplot(aes(x = gluc, fill = as.factor(cardio))) +geom_bar()
#continuous
age_distribution <- data %>%
ggplot(aes(x = age, fill = as.factor(cardio))) + geom_histogram(bins=30) +
theme(legend.position="none")
height_distribution <- data %>%
ggplot(aes(x = height, fill = as.factor(cardio))) + geom_histogram(bins=30) +
theme(legend.position="none")
weight_distribution <- data %>%
ggplot(aes(x = weight, fill = as.factor(cardio))) + geom_histogram(bins=30) +
theme(legend.position="none")
hi_distribution <- data %>%
ggplot(aes(x = ap_hi, fill = as.factor(cardio))) + geom_histogram(bins=30) +
theme(legend.position="none")
lo_distribution <- data %>%
ggplot(aes(x = ap_lo, fill = as.factor(cardio))) + geom_histogram(bins=30) +
theme(legend.position="none")
#put into the same frame
figure <- ggarrange(gender_distribution, smoke_distribution, alco_distribution,
active_distribution, cholesterol_distribution, gluc_distribution,
age_distribution, height_distribution, weight_distribution,
hi_distribution, lo_distribution,
ncol = 3, nrow = 4)
figure
dev.off()
library(MASS)
library(pROC)
library(caret)
library(dplyr)
library(adabag)
setwd("~/BIOS611project")
data <- read.csv("data/clean_data.csv")
data <- as.data.frame(unclass(data), stringsAsFactors = TRUE)
#First split the data into training and testing sets.
set.seed(359)
train_test_data <- data %>% mutate(train=runif(nrow(.)) < 0.75)
train <- train_test_data %>% dplyr::filter(train) %>% dplyr::select(-train)
test <- train_test_data %>% dplyr::filter(!train) %>% dplyr::select(-train)
cat(sprintf("Linear Discrimnant Analysis, Logistic Regression, and Adaboost will be used to model the dataset. \n"),
file="data_analysis.txt", append = FALSE);
#Linear Discriminant analysis
lda_results <- lda(cardio~.,data=train)
lda_results
lda_pred_train <- predict(lda_results, train)
lda_pred_test <- predict(lda_results, test)
png('./figures/lda.png')
ldahist(data = lda_pred_train$x, g = train$cardio)
dev.off()
roc_LDA<-roc(test$cardio, lda_pred_test$posterior[,2])
auc_LDA=auc(roc_LDA)
cat(sprintf("Using Linear Discriminant Analysis, the auc is %s for the testing set. \n",
auc_LDA),
file="data_analysis.txt", append = TRUE);
#fit a logistic model with the age variables
logistic_model <- glm(cardio ~ . , family =binomial, data = train);
summary(logistic_model)
anova(logistic_model, test="Chisq")
logistic_pred_test <- predict(logistic_model, newdata = test, type = "response")
roc_logistic <- roc(test$cardio,  logistic_pred_test)
auc_logistic=auc(roc_logistic)
logistic_model_step<-step(logistic_model)
logistic_pred_test1 <- predict(logistic_model_step, newdata = test, type = "response")
roc_logistic1 <- roc(test$cardio,  logistic_pred_test1)
auc_logistic1 <- auc(roc_logistic1)
cat(sprintf("Using logistic regression, the auc is %s for the testing set. After a stepwise variable selection, the auc is %s with only four variables: heart_disease, hypertension, avg_glucose_level, and age. \n",
auc_logistic, auc_logistic1),
file="data_analysis.txt", append = TRUE);
#adaboost
train$cardio <- as.factor(train$cardio)
test$cardio <- as.factor(test$cardio)
model <- boosting(cardio ~ ., data=train, boos=TRUE, mfinal=50)
adaboost_pred <- predict(model, test)
adaboost_pred$confusion
adaboost_pred$error
roc_adaboost <- roc(test$cardio, adaboost_pred$prob[,2])
auc_adaboost <- auc(roc_adaboost)
cat(sprintf("Using adaboost, the auc is %s for the testing set. \n ",
auc_logistic),
file="data_analysis.txt", append = TRUE);
#plot the ROC curve for LDA, logistic regression
png('./figures/roc.png')
par(mfrow=c(2,2))
par(mfrow=c(1,3))
plot(roc_LDA, xlab="False Positive Percentage", ylab="True Positive Percentage", main="LDA ROC")
plot(roc_logistic, xlab="False Positive Percentage", ylab="True Positive Percentage", main="Logistic ROC")
plot(roc_adaboost, xlab="False Positive Percentage", ylab="True Positive Percentage", main="Adaboost ROC")
dev.off()
#plot the ROC curve for LDA, logistic regression
png('./figures/roc.png')
par(mfrow=c(3,1))
plot(roc_LDA, xlab="False Positive Percentage", ylab="True Positive Percentage", main="LDA ROC")
plot(roc_logistic, xlab="False Positive Percentage", ylab="True Positive Percentage", main="Logistic ROC")
plot(roc_adaboost, xlab="False Positive Percentage", ylab="True Positive Percentage", main="Adaboost ROC")
dev.off()
#plot the ROC curve for LDA, logistic regression
png('./figures/roc.png')
par(mfrow=c(2,2))
plot(roc_LDA, xlab="False Positive Percentage", ylab="True Positive Percentage", main="LDA ROC")
plot(roc_logistic, xlab="False Positive Percentage", ylab="True Positive Percentage", main="Logistic ROC")
plot(roc_adaboost, xlab="False Positive Percentage", ylab="True Positive Percentage", main="Adaboost ROC")
dev.off()
cat(sprintf("Using Linear Discriminant Analysis, the auc is %s for the testing set. \n",
auc_LDA),
file="data_analysis.txt", append = TRUE);
cat(sprintf("Using logistic regression, the auc is %s for the testing set. After a stepwise variable selection, the auc is %s with ten variables: systolic blood pressure, diastolic blood pressure, smoking, alcohol intake, height, glucose, physical activity, weight, cholesterol, age . \n",
auc_logistic, auc_logistic1),
file="data_analysis.txt", append = TRUE);
cat(sprintf("Using adaboost, the auc is %s for the testing set. \n ",
auc_logistic),
file="data_analysis.txt", append = TRUE);
